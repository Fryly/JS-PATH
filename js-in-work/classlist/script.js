//получаем сперва наши кнопки
const btns = document.querySelectorAll('button');

//выводим количество классов у каждой из кнопок
btns.forEach(i => {
    // console.log(i.classList.length);
});

//с помощью метода item мы можем узнать название класса, указава индекс класа который хотим вывести
btns.forEach(i => {
    // console.log(i.classList.item(1)); //в данном случае выведется каждый второй класс у каждой нашей кнопки
});

//с помощью метода add мы можем добавлять класс(ы) одному элементу, или через цикл всем
btns.forEach(i => {
    // i.classList.add('red', 'green');
});

//чтобы удалить ненужные нам класс(ы) есть метода remove
btns.forEach(i => {
    // i.classList.remove('blue'); //можно так же ка и с add добавить несколько для удаления
});

//есть специальный метод toggle, который добавляет класс элементу если он у него отсутствует и убирает если такой класс у элемента есть
btns.forEach(i => {
    i.classList.toggle('some'); // у первого элемента этот класс исчезнет, у всех остальных добавиться
});

//можем также проверить через условие наличие определенного класса у элемента, через специальный метод contains
btns.forEach(i => {
    // console.log(i.classList.contains('blue'));

    // if (i.classList.contains('blue')) {
    //     console.log('такой класс есть');
    // } else {
    //     console.log('такой класс отсутствует');
    // }
});

//применим наш contains, в более сложно условии
//напишем скрипт напоминающий открытие и закрытие гамбургер меню
btns.forEach(i => {
    //сперва добавим обработчки события по клику на каждую нашу кнопку
    i.addEventListener('click', () => {
        //зададим условие, что если элемент не содержит такой класс то его будет добавлять
        if (!i.classList.contains('red')) {
            i.classList.add('red');
        } else {
            i.classList.remove('red'); //а если содержит то будет удалять
        }

        //через toggle такой функционал тоже можно сделать
        // i.classList.toggle('red');
    });
});

//ДЕЛЕГИРОВАНИЕ СОБЫТИЙ

//по простому делигирование это когда мы вещаем какое-то событие на родителя, и в зависимости от какого либо условия оно либо будет срабатывать на потомке(потомках), либо не будет

//представим ситуацию что нам нужно на все кнопки повесить определнное условие, к примеру, по нажатию на кнопку выводить сообщение

//без делегирования мы знаем как это можно сделать

//обращаемся к коллекции наших кнопок, и перебираем их через foreach
btns.forEach(i => {
    //далее на каждую кнопку вещаем событие
    i.addEventListener('click', e => {
        // console.log('кнопка нажата');
    });
});

//но если мы созадим новый элемент через скрипт, то обработчик через перебор который мы наложили уже работать не будет
const wrapper = document.querySelector('.btn-block');
// const btn  = document.createElement('button');
// btn.classList.add('green');
// wrapper.append(btn);

//однако если мы воспользуемся делегирование, то даже для новосозданых будет работать наше событие

wrapper.addEventListener('click', e => {
    //первую проверку e.target рекомендует использовать гугл, дабы проверить на элементы которые не имеют target, по типу тега </br>
    if (e.target && e.target.tagName == 'BUTTON') { //далее мы проверяем что если название тега на который мы кликаем внутри родителя это кнопка, тогда обработчик сработает
        // console.log('делегирование работает');

    }
});

//теперь вы видим что последняя кнопка которая была создана без делигирования не закрашивается в красный цвет по клику

//мы также можем использовать делегирование через метод contains
//к примеру напишем условие которое будет проверять кнопку на наличие класса green, и если такой есть - выводить сообщение

wrapper.addEventListener('click', e => {
    if (e.target && e.target.classList.contains('green')) { 
        // console.log('делегирование работает');//теперь сообщение будет показываться только при нажатии на кнопку с классом green

    }
});

//продвинатя техника делегирования которую используют в гугл, это поиск совпадений через matches

//созаддим ещё одну кнопку с классом white
const whiteBtn  = document.createElement('button');
whiteBtn.classList.add('white');
wrapper.append(whiteBtn);

//напишем продвинутое делегирование используя matches

wrapper.addEventListener('click', e => {
    if (e.target && e.target.matches('button.white')) { 
        console.log('делегирование работает');//теперь сообщение будет показываться только при нажатии на кнопку с классом white

    }
});
